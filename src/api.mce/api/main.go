package api

import (
	"errors"
	"net/http"

	gErrors "github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"mingchuan.me/api/restapi"
	"mingchuan.me/api/restapi/operations"
)

// API - alias of operations.MceAPI
type API = operations.MceAPI

// Server - API server instance, generated by go-swagger
type Server struct {
	// server listening port
	Port         int
	api          *operations.MceAPI
	server       *restapi.Server
	middlewares  []middlewareFunc
	errorHandler ErrorHandlerFunc
}

// NewServer - New()
func NewServer(port int) *Server {
	server := new(Server)
	// assign listen port
	server.Port = port
	// middlewares
	server.middlewares = make([]middlewareFunc, 0)
	// error handler
	server.errorHandler = defaultErrorHandler()
	return server
}

// Init - initialize API & server
func (s *Server) Init() error {
	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		return err
	}

	api := operations.NewMceAPI(swaggerSpec)
	server := restapi.NewServer(api)
	// set port
	server.Port = s.Port

	s.api = api
	s.server = server

	return nil
}

// Listen - listen to bound port
func (s *Server) Listen() error {
	sv := s.server
	// assert server instance exists
	if sv == nil {
		return errors.New("Invalid `server` instance! Maybe forget `Init()` ?")
	}
	// update API with several handlers bound
	s.configureAPI()
	defer sv.Shutdown()
	return sv.Serve()
}

// getters

// GetAPI - getter of s.api
func (s *Server) GetAPI() *operations.MceAPI {
	return s.api
}

func (s *Server) configureAPI() {
	api := s.api

	// configure the api here
	api.ServeError = gErrors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ServerShutdown = func() {}

	apiHandler := s.runMiddlewares(api.Serve(s.setupMiddlewares))
	s.server.SetHandler(apiHandler)
}

// no idea how to use it == :sad
func (s *Server) setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}
