// Code generated by go-swagger; DO NOT EDIT.

package todo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateItemTHandlerFunc turns a function with the right signature into a update item t handler
type UpdateItemTHandlerFunc func(UpdateItemTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateItemTHandlerFunc) Handle(params UpdateItemTParams) middleware.Responder {
	return fn(params)
}

// UpdateItemTHandler interface for that can handle valid update item t params
type UpdateItemTHandler interface {
	Handle(UpdateItemTParams) middleware.Responder
}

// NewUpdateItemT creates a new http.Handler for the update item t operation
func NewUpdateItemT(ctx *middleware.Context, handler UpdateItemTHandler) *UpdateItemT {
	return &UpdateItemT{Context: ctx, Handler: handler}
}

/*UpdateItemT swagger:route PATCH /admin/todos/{id} todo updateItemT

update TODO item

*/
type UpdateItemT struct {
	Context *middleware.Context
	Handler UpdateItemTHandler
}

func (o *UpdateItemT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateItemTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
