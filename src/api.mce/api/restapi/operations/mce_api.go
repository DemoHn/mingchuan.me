// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"mingchuan.me/api/restapi/operations/account"
	"mingchuan.me/api/restapi/operations/blog"
	"mingchuan.me/api/restapi/operations/misc"
	"mingchuan.me/api/restapi/operations/todo"
)

// NewMceAPI creates a new Mce instance
func NewMceAPI(spec *loads.Document) *MceAPI {
	return &MceAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TodoCreateItemTHandler: todo.CreateItemTHandlerFunc(func(params todo.CreateItemTParams) middleware.Responder {
			return middleware.NotImplemented("operation TodoCreateItemT has not yet been implemented")
		}),
		BlogCreatePostHandler: blog.CreatePostHandlerFunc(func(params blog.CreatePostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogCreatePost has not yet been implemented")
		}),
		TodoDeleteItemTHandler: todo.DeleteItemTHandlerFunc(func(params todo.DeleteItemTParams) middleware.Responder {
			return middleware.NotImplemented("operation TodoDeleteItemT has not yet been implemented")
		}),
		BlogDeletePostHandler: blog.DeletePostHandlerFunc(func(params blog.DeletePostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogDeletePost has not yet been implemented")
		}),
		BlogGetOnePostHandler: blog.GetOnePostHandlerFunc(func(params blog.GetOnePostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogGetOnePost has not yet been implemented")
		}),
		BlogGetOnePublicPostHandler: blog.GetOnePublicPostHandlerFunc(func(params blog.GetOnePublicPostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogGetOnePublicPost has not yet been implemented")
		}),
		MiscHealthCheckHandler: misc.HealthCheckHandlerFunc(func(params misc.HealthCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation MiscHealthCheck has not yet been implemented")
		}),
		TodoListAllItemsTHandler: todo.ListAllItemsTHandlerFunc(func(params todo.ListAllItemsTParams) middleware.Responder {
			return middleware.NotImplemented("operation TodoListAllItemsT has not yet been implemented")
		}),
		BlogListAllPostsHandler: blog.ListAllPostsHandlerFunc(func(params blog.ListAllPostsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogListAllPosts has not yet been implemented")
		}),
		BlogListPublicPostsHandler: blog.ListPublicPostsHandlerFunc(func(params blog.ListPublicPostsParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogListPublicPosts has not yet been implemented")
		}),
		AccountLoginHandler: account.LoginHandlerFunc(func(params account.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountLogin has not yet been implemented")
		}),
		BlogPublishPostHandler: blog.PublishPostHandlerFunc(func(params blog.PublishPostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogPublishPost has not yet been implemented")
		}),
		AccountRegisterAdminHandler: account.RegisterAdminHandlerFunc(func(params account.RegisterAdminParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountRegisterAdmin has not yet been implemented")
		}),
		TodoUpdateItemTHandler: todo.UpdateItemTHandlerFunc(func(params todo.UpdateItemTParams) middleware.Responder {
			return middleware.NotImplemented("operation TodoUpdateItemT has not yet been implemented")
		}),
		BlogUpdatePostHandler: blog.UpdatePostHandlerFunc(func(params blog.UpdatePostParams) middleware.Responder {
			return middleware.NotImplemented("operation BlogUpdatePost has not yet been implemented")
		}),
	}
}

/*MceAPI This doc contains all APIs for https://mingchuan.me. */
type MceAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// TodoCreateItemTHandler sets the operation handler for the create item t operation
	TodoCreateItemTHandler todo.CreateItemTHandler
	// BlogCreatePostHandler sets the operation handler for the create post operation
	BlogCreatePostHandler blog.CreatePostHandler
	// TodoDeleteItemTHandler sets the operation handler for the delete item t operation
	TodoDeleteItemTHandler todo.DeleteItemTHandler
	// BlogDeletePostHandler sets the operation handler for the delete post operation
	BlogDeletePostHandler blog.DeletePostHandler
	// BlogGetOnePostHandler sets the operation handler for the get one post operation
	BlogGetOnePostHandler blog.GetOnePostHandler
	// BlogGetOnePublicPostHandler sets the operation handler for the get one public post operation
	BlogGetOnePublicPostHandler blog.GetOnePublicPostHandler
	// MiscHealthCheckHandler sets the operation handler for the health check operation
	MiscHealthCheckHandler misc.HealthCheckHandler
	// TodoListAllItemsTHandler sets the operation handler for the list all items t operation
	TodoListAllItemsTHandler todo.ListAllItemsTHandler
	// BlogListAllPostsHandler sets the operation handler for the list all posts operation
	BlogListAllPostsHandler blog.ListAllPostsHandler
	// BlogListPublicPostsHandler sets the operation handler for the list public posts operation
	BlogListPublicPostsHandler blog.ListPublicPostsHandler
	// AccountLoginHandler sets the operation handler for the login operation
	AccountLoginHandler account.LoginHandler
	// BlogPublishPostHandler sets the operation handler for the publish post operation
	BlogPublishPostHandler blog.PublishPostHandler
	// AccountRegisterAdminHandler sets the operation handler for the register admin operation
	AccountRegisterAdminHandler account.RegisterAdminHandler
	// TodoUpdateItemTHandler sets the operation handler for the update item t operation
	TodoUpdateItemTHandler todo.UpdateItemTHandler
	// BlogUpdatePostHandler sets the operation handler for the update post operation
	BlogUpdatePostHandler blog.UpdatePostHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MceAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MceAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MceAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MceAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MceAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MceAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MceAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MceAPI
func (o *MceAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TodoCreateItemTHandler == nil {
		unregistered = append(unregistered, "todo.CreateItemTHandler")
	}

	if o.BlogCreatePostHandler == nil {
		unregistered = append(unregistered, "blog.CreatePostHandler")
	}

	if o.TodoDeleteItemTHandler == nil {
		unregistered = append(unregistered, "todo.DeleteItemTHandler")
	}

	if o.BlogDeletePostHandler == nil {
		unregistered = append(unregistered, "blog.DeletePostHandler")
	}

	if o.BlogGetOnePostHandler == nil {
		unregistered = append(unregistered, "blog.GetOnePostHandler")
	}

	if o.BlogGetOnePublicPostHandler == nil {
		unregistered = append(unregistered, "blog.GetOnePublicPostHandler")
	}

	if o.MiscHealthCheckHandler == nil {
		unregistered = append(unregistered, "misc.HealthCheckHandler")
	}

	if o.TodoListAllItemsTHandler == nil {
		unregistered = append(unregistered, "todo.ListAllItemsTHandler")
	}

	if o.BlogListAllPostsHandler == nil {
		unregistered = append(unregistered, "blog.ListAllPostsHandler")
	}

	if o.BlogListPublicPostsHandler == nil {
		unregistered = append(unregistered, "blog.ListPublicPostsHandler")
	}

	if o.AccountLoginHandler == nil {
		unregistered = append(unregistered, "account.LoginHandler")
	}

	if o.BlogPublishPostHandler == nil {
		unregistered = append(unregistered, "blog.PublishPostHandler")
	}

	if o.AccountRegisterAdminHandler == nil {
		unregistered = append(unregistered, "account.RegisterAdminHandler")
	}

	if o.TodoUpdateItemTHandler == nil {
		unregistered = append(unregistered, "todo.UpdateItemTHandler")
	}

	if o.BlogUpdatePostHandler == nil {
		unregistered = append(unregistered, "blog.UpdatePostHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MceAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MceAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *MceAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *MceAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MceAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MceAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mce API
func (o *MceAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MceAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/todos"] = todo.NewCreateItemT(o.context, o.TodoCreateItemTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/posts"] = blog.NewCreatePost(o.context, o.BlogCreatePostHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/todos/{id}"] = todo.NewDeleteItemT(o.context, o.TodoDeleteItemTHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/posts/{id}"] = blog.NewDeletePost(o.context, o.BlogDeletePostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/posts/{id}"] = blog.NewGetOnePost(o.context, o.BlogGetOnePostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/posts/{id}"] = blog.NewGetOnePublicPost(o.context, o.BlogGetOnePublicPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthz"] = misc.NewHealthCheck(o.context, o.MiscHealthCheckHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/todos"] = todo.NewListAllItemsT(o.context, o.TodoListAllItemsTHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/posts"] = blog.NewListAllPosts(o.context, o.BlogListAllPostsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/posts"] = blog.NewListPublicPosts(o.context, o.BlogListPublicPostsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accounts/login"] = account.NewLogin(o.context, o.AccountLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/posts/{id}/publish"] = blog.NewPublishPost(o.context, o.BlogPublishPostHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accounts/register-admin"] = account.NewRegisterAdmin(o.context, o.AccountRegisterAdminHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/admin/todos/{id}"] = todo.NewUpdateItemT(o.context, o.TodoUpdateItemTHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/admin/posts/{id}"] = blog.NewUpdatePost(o.context, o.BlogUpdatePostHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MceAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MceAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MceAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MceAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
