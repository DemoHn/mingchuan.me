// Code generated by go-swagger; DO NOT EDIT.

package blog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreatePostHandlerFunc turns a function with the right signature into a create post handler
type CreatePostHandlerFunc func(CreatePostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePostHandlerFunc) Handle(params CreatePostParams) middleware.Responder {
	return fn(params)
}

// CreatePostHandler interface for that can handle valid create post params
type CreatePostHandler interface {
	Handle(CreatePostParams) middleware.Responder
}

// NewCreatePost creates a new http.Handler for the create post operation
func NewCreatePost(ctx *middleware.Context, handler CreatePostHandler) *CreatePost {
	return &CreatePost{Context: ctx, Handler: handler}
}

/*CreatePost swagger:route POST /admin/posts blog createPost

create a new post

Term `public` means permission=PUBLIC and status=PUBLISHED


*/
type CreatePost struct {
	Context *middleware.Context
	Handler CreatePostHandler
}

func (o *CreatePost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreatePostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
