// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This doc contains all APIs for https://mingchuan.me.",
    "title": "mingchuan.me API",
    "contact": {
      "email": "demohn2016@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "paths": {
    "/accounts/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Retrieve login JWT to admin panel.",
        "operationId": "login",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/JwtResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/accounts/register-admin": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Register a new admin account.",
        "operationId": "registerAdmin",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountRegisterPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/JwtResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "list all posts by pages",
        "operationId": "listAllPosts",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/PostsListOfPage"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "description": "Term ` + "`" + `public` + "`" + ` means permission=PUBLIC and status=PUBLISHED\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "create a new post",
        "operationId": "createPost",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePostPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "get one post (all)",
        "operationId": "getOnePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "delete one post",
        "operationId": "deletePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/DeletePostResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "update one post",
        "operationId": "updatePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePostPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts/{id}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "publish a post",
        "operationId": "publishPost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/todos": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "list all TODO items",
        "operationId": "listAllItemsT",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TodoList"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "create TODO item",
        "operationId": "createItemT",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TodoPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/todos/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "delete TODO item",
        "operationId": "deleteItemT",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "update TODO item",
        "operationId": "updateItemT",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TodoPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "misc"
        ],
        "summary": "health check",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/HealthResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "description": "Term ` + "`" + `public` + "`" + ` means permission=PUBLIC and status=PUBLISHED\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "list **public** posts by cursor",
        "operationId": "listPublicPosts",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/PostsList"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "get one **public** post",
        "operationId": "getOnePublicPost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountPayload": {
      "type": "object",
      "required": [
        "name",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "description": "register password",
          "type": "string",
          "example": "asdfghJKL"
        }
      }
    },
    "AccountRegisterPayload": {
      "type": "object",
      "required": [
        "name",
        "password",
        "adminKey"
      ],
      "properties": {
        "adminKey": {
          "description": "adminKey - generated once running on server",
          "type": "string",
          "example": "ASDFGHIJKL"
        },
        "name": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "description": "register password",
          "type": "string",
          "example": "asdfghJKL"
        }
      }
    },
    "CreatePostPayload": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "Content"
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "example": "Hello Title!"
        }
      }
    },
    "DeletePostResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "delete post id",
          "type": "integer",
          "example": 12306
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "HealthResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string",
          "example": "development"
        },
        "status": {
          "type": "boolean",
          "example": true
        },
        "timestamp": {
          "type": "integer",
          "example": 1539755752639
        }
      }
    },
    "JwtResponse": {
      "type": "object",
      "required": [
        "jwt"
      ],
      "properties": {
        "jwt": {
          "description": "JWT secret for authorization.",
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMCJ9.Da7PRbpbmzLGqEMWoI8lD71kiSDW5vrS0X7MBvxYi9Q"
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a contenft"
        },
        "createdAt": {
          "type": "integer",
          "example": 2178423456
        },
        "id": {
          "type": "integer",
          "example": 12306
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "example": "Hello World"
        },
        "updatedAt": {
          "type": "integer",
          "example": 2178423456
        }
      }
    },
    "PostsList": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "example": "12"
        },
        "hasMore": {
          "type": "boolean",
          "example": false
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "PostsListOfPage": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "example": 1
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "ServiceError": {
      "type": "object",
      "required": [
        "name",
        "code",
        "detail"
      ],
      "properties": {
        "code": {
          "description": "eror code, generally a 5-long digits",
          "type": "integer",
          "example": 12010
        },
        "detail": {
          "description": "error details.",
          "type": "string",
          "example": "This error means the API is not implemented."
        },
        "name": {
          "description": "error name",
          "type": "string",
          "example": "ErrNotImplemented"
        }
      }
    },
    "Todo": {
      "type": "object",
      "properties": {
        "content": {
          "description": "TODO item",
          "type": "string",
          "example": "Tomorrow don't forget to write Golang Code."
        },
        "id": {
          "description": "TODO item I",
          "type": "integer",
          "example": 10
        }
      }
    },
    "TodoList": {
      "type": "object",
      "properties": {
        "todos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Todo"
          }
        }
      }
    },
    "TodoPayload": {
      "type": "object",
      "properties": {
        "content": {
          "description": "TODO item",
          "type": "string",
          "example": "Tomorrow don't forget to write Golang Code."
        }
      }
    },
    "UpdatePostPayload": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-nullable": true,
          "example": "Content"
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "x-nullable": true,
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "x-nullable": true,
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "x-nullable": true,
          "example": "Hello Title!"
        }
      }
    }
  },
  "tags": [
    {
      "description": "mingchuan.me ADMIN accounts login/logout.",
      "name": "account"
    },
    {
      "description": "mingchuan.me blog managing APIs. ` + "`" + `mce` + "`" + ` is a simple blog server, too.",
      "name": "blog"
    },
    {
      "description": "misc APIs, including healthz check, etc.",
      "name": "misc"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This doc contains all APIs for https://mingchuan.me.",
    "title": "mingchuan.me API",
    "contact": {
      "email": "demohn2016@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "paths": {
    "/accounts/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Retrieve login JWT to admin panel.",
        "operationId": "login",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/JwtResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/accounts/register-admin": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Register a new admin account.",
        "operationId": "registerAdmin",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountRegisterPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/JwtResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "list all posts by pages",
        "operationId": "listAllPosts",
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/PostsListOfPage"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "description": "Term ` + "`" + `public` + "`" + ` means permission=PUBLIC and status=PUBLISHED\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "create a new post",
        "operationId": "createPost",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePostPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "get one post (all)",
        "operationId": "getOnePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "delete one post",
        "operationId": "deletePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/DeletePostResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "update one post",
        "operationId": "updatePost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePostPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/posts/{id}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "publish a post",
        "operationId": "publishPost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/todos": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "list all TODO items",
        "operationId": "listAllItemsT",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TodoList"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "create TODO item",
        "operationId": "createItemT",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TodoPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/admin/todos/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "delete TODO item",
        "operationId": "deleteItemT",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "todo"
        ],
        "summary": "update TODO item",
        "operationId": "updateItemT",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TodoPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "misc"
        ],
        "summary": "health check",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/HealthResponse"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "description": "Term ` + "`" + `public` + "`" + ` means permission=PUBLIC and status=PUBLISHED\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "list **public** posts by cursor",
        "operationId": "listPublicPosts",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/PostsList"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "blog"
        ],
        "summary": "get one **public** post",
        "operationId": "getOnePublicPost",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "service error",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "500": {
            "description": "service error (fatal)",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountPayload": {
      "type": "object",
      "required": [
        "name",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "description": "register password",
          "type": "string",
          "example": "asdfghJKL"
        }
      }
    },
    "AccountRegisterPayload": {
      "type": "object",
      "required": [
        "name",
        "password",
        "adminKey"
      ],
      "properties": {
        "adminKey": {
          "description": "adminKey - generated once running on server",
          "type": "string",
          "example": "ASDFGHIJKL"
        },
        "name": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "description": "register password",
          "type": "string",
          "example": "asdfghJKL"
        }
      }
    },
    "CreatePostPayload": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "Content"
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "example": "Hello Title!"
        }
      }
    },
    "DeletePostResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "delete post id",
          "type": "integer",
          "example": 12306
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "HealthResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string",
          "example": "development"
        },
        "status": {
          "type": "boolean",
          "example": true
        },
        "timestamp": {
          "type": "integer",
          "example": 1539755752639
        }
      }
    },
    "JwtResponse": {
      "type": "object",
      "required": [
        "jwt"
      ],
      "properties": {
        "jwt": {
          "description": "JWT secret for authorization.",
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMCJ9.Da7PRbpbmzLGqEMWoI8lD71kiSDW5vrS0X7MBvxYi9Q"
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "This is a contenft"
        },
        "createdAt": {
          "type": "integer",
          "example": 2178423456
        },
        "id": {
          "type": "integer",
          "example": 12306
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "example": "Hello World"
        },
        "updatedAt": {
          "type": "integer",
          "example": 2178423456
        }
      }
    },
    "PostsList": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "example": "12"
        },
        "hasMore": {
          "type": "boolean",
          "example": false
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "PostsListOfPage": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "example": 1
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "ServiceError": {
      "type": "object",
      "required": [
        "name",
        "code",
        "detail"
      ],
      "properties": {
        "code": {
          "description": "eror code, generally a 5-long digits",
          "type": "integer",
          "example": 12010
        },
        "detail": {
          "description": "error details.",
          "type": "string",
          "example": "This error means the API is not implemented."
        },
        "name": {
          "description": "error name",
          "type": "string",
          "example": "ErrNotImplemented"
        }
      }
    },
    "Todo": {
      "type": "object",
      "properties": {
        "content": {
          "description": "TODO item",
          "type": "string",
          "example": "Tomorrow don't forget to write Golang Code."
        },
        "id": {
          "description": "TODO item I",
          "type": "integer",
          "example": 10
        }
      }
    },
    "TodoList": {
      "type": "object",
      "properties": {
        "todos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Todo"
          }
        }
      }
    },
    "TodoPayload": {
      "type": "object",
      "properties": {
        "content": {
          "description": "TODO item",
          "type": "string",
          "example": "Tomorrow don't forget to write Golang Code."
        }
      }
    },
    "UpdatePostPayload": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-nullable": true,
          "example": "Content"
        },
        "permission": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "x-nullable": true,
          "example": "PUBLIC"
        },
        "status": {
          "type": "string",
          "enum": [
            "PUBLISHED",
            "DRAFTED",
            "REMOVED"
          ],
          "x-nullable": true,
          "example": "PUBLISHED"
        },
        "title": {
          "type": "string",
          "x-nullable": true,
          "example": "Hello Title!"
        }
      }
    }
  },
  "tags": [
    {
      "description": "mingchuan.me ADMIN accounts login/logout.",
      "name": "account"
    },
    {
      "description": "mingchuan.me blog managing APIs. ` + "`" + `mce` + "`" + ` is a simple blog server, too.",
      "name": "blog"
    },
    {
      "description": "misc APIs, including healthz check, etc.",
      "name": "misc"
    }
  ]
}`))
}
