swagger: '2.0'
info:
  version: 1.0.0
  title: mingchuan.me API
  description: This doc contains all APIs for https://mingchuan.me.
  contact:
    email: demohn2016@gmail.com
host: localhost:4000
basePath: /api/v1
schemes:
  - http
tags:
  - name: account
    description: mingchuan.me ADMIN accounts login/logout.
  - name: blog
    description: mingchuan.me blog managing APIs. `mce` is a simple blog server, too.
  - name: misc
    description: misc APIs, including healthz check, etc.
paths:
  /accounts/register-admin:
    post:
      summary: Register a new admin account.
      tags: 
        - account
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: request
          required: true
          in: body
          schema:
            $ref: '#/definitions/AccountRegisterPayload'
      operationId: registerAdmin
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/JwtResponse'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /accounts/login:
    post:
      summary: Retrieve login JWT to admin panel.
      tags: 
        - account
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: request
          required: true
          in: body
          schema:
            $ref: '#/definitions/AccountPayload'
      operationId: login
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/JwtResponse'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  '/posts/{id}':
    get:
      summary: get one **public** post
      tags: 
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: integer
      operationId: getOnePublicPost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Post'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /posts:
    get:
      summary: list **public** posts by cursor
      description: |
        Term `public` means permission=PUBLIC and status=PUBLISHED
      tags:
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: cursor        
          in: query
          type: string
        - name: limit
          in: query
          type: integer
      operationId: listPublicPosts
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/PostsList'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /admin/posts:
    post:
      summary: create a new post
      description: |
        Term `public` means permission=PUBLIC and status=PUBLISHED
      tags:
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: request
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreatePostPayload'
      operationId: createPost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Post'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
    get:
      summary: list all posts by pages
      tags:
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: page
          in: query
          type: integer
        - name: limit
          in: query
          type: integer
      operationId: listAllPosts
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/PostsListOfPage'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  '/admin/posts/{id}/publish':
    post:
      summary: publish a post
      tags: 
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: integer
      operationId: publishPost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Post'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  '/admin/posts/{id}':  
    get:
      summary: get one post (all)
      tags: 
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: integer
      operationId: getOnePost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Post'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
    delete:
      summary: delete one post
      tags: 
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: integer
      operationId: deletePost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/DeletePostResponse'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
    patch:
      summary: update one post
      tags:
        - blog
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: integer
        - name: request
          in: body
          schema:
            $ref: '#/definitions/UpdatePostPayload'
      operationId: updatePost
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Post'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /admin/todos:
    get:
      summary: list all TODO items      
      tags:
        - todo
      produces:
        - application/json
      consumes:
        - application/json
      operationId: listAllItemsT
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/TodoList'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
    post:
      summary: create TODO item
      tags:
        - todo
      produces:
        - application/json
      consumes:
        - application/json
      operationId: createItemT
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/TodoPayload'
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Todo'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /admin/todos/{id}:
    patch:
      summary: update TODO item
      tags:
        - todo
      produces:
        - application/json
      consumes:
        - application/json
      operationId: updateItemT
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/TodoPayload'
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Todo'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
    delete:
      summary: delete TODO item
      tags:
        - todo
      produces:
        - application/json
      consumes:
        - application/json
      operationId: deleteItemT
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/Todo'
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'
  /healthz:
    get:
      summary: health check
      tags:
        - misc
      produces:
        - application/json
      consumes:
        - application/json
      operationId: healthCheck
      responses:
        200:
          description: success
          schema:
           $ref: '#/definitions/HealthResponse'                
        400:
          description: service error
          schema:
            $ref: '#/definitions/ServiceError'
        500:
          description: service error (fatal)
          schema:
            $ref: '#/definitions/ServiceError'  
definitions:
  AccountPayload:
    type: object
    required:
      - name
      - password
    properties:
      name:
        type: string
        example: admin
      password:
        type: string
        description: register password
        example: asdfghJKL
  AccountRegisterPayload:
    type: object
    required:
      - name
      - password
      - adminKey
    properties:
      name:
        type: string
        example: admin
      password:
        type: string
        description: register password
        example: asdfghJKL
      adminKey:
        type: string
        description: adminKey - generated once running on server
        example: ASDFGHIJKL
  JwtResponse:
    type: object
    required:
      - jwt
    properties:
      jwt:
        type: string
        description: JWT secret for authorization.                
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMCJ9.Da7PRbpbmzLGqEMWoI8lD71kiSDW5vrS0X7MBvxYi9Q
  CreatePostPayload:
    type: object
    properties:
      title:
        type: string
        example: Hello Title!
      content:
        type: string
        example: Content
      status:
        type: string
        example: PUBLISHED
        enum:
          - PUBLISHED
          - DRAFTED
          - REMOVED
      permission:
        type: string
        example: PUBLIC
        enum:
          - PUBLIC
          - PRIVATE
  UpdatePostPayload:
    type: object
    properties:
      title:
        x-nullable: true
        type: string
        example: Hello Title!
      content:
        x-nullable: true
        type: string
        example: Content
      status:
        x-nullable: true
        type: string
        example: PUBLISHED
        enum:
          - PUBLISHED
          - DRAFTED
          - REMOVED
      permission:
        x-nullable: true
        type: string
        example: PUBLIC
        enum:
          - PUBLIC
          - PRIVATE  	
  Post:
    type: object
    properties:
      id:
        type: integer
        example: 12306
      title:
        type: string
        example: Hello World
      content:
        type: string
        example: This is a contenft
      status:
        type: string
        example: PUBLISHED
        enum:
          - PUBLISHED
          - DRAFTED
          - REMOVED
      permission:
        type: string
        example: PUBLIC
        enum:
          - PUBLIC
          - PRIVATE
      createdAt:
        type: integer
        example: 2178423456
      updatedAt:
        type: integer
        example: 2178423456
  PostsList:
    type: object
    properties:
      hasMore:
        type: boolean
        example: false
      cursor:
        type: string
        example: "12"
      posts:
        type: array
        items:
          $ref: '#/definitions/Post'
  PostsListOfPage:
    type: object
    properties:
      page:
        type: integer
        example: 1
      posts:
        type: array
        items:
          $ref: '#/definitions/Post'
  DeletePostResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      id:
        type: integer
        example: 12306
        description: delete post id
  ServiceError:
    type: object
    required:
      - name
      - code
      - detail
    properties:
      name:
        type: string
        description: error name
        example: ErrNotImplemented
      code:
        type: integer
        description: eror code, generally a 5-long digits
        example: 12010
      detail:
        type: string
        description: error details.
        example: This error means the API is not implemented.
  TodoPayload:
    type: object
    properties:
      content:
        type: string
        description: TODO item
        example: Tomorrow don't forget to write Golang Code.
  Todo:
    type: object
    properties:
      id:
        type: integer
        description: TODO item I
        example: 10
      content:
        type: string
        description: TODO item
        example: Tomorrow don't forget to write Golang Code.
  TodoList:
    type: object
    properties:
      todos:
        type: array
        items:
          $ref: '#/definitions/Todo'
  ServiceError:
    type: object
    required:
      - name
      - code
      - detail
    properties:
      name:
        type: string
        description: error name
        example: ErrNotImplemented
      code:
        type: integer
        description: eror code, generally a 5-long digits
        example: 12010
      detail:
        type: string
        description: error details.
        example: This error means the API is not implemented.
  HealthResponse:
    type: object
    properties:
      status:
        type: boolean
        example: true
      timestamp:
        type: integer
        example: 1539755752639
      environment:
        type: string
        example: development