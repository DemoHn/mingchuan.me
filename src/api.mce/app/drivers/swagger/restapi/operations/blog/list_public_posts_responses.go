// Code generated by go-swagger; DO NOT EDIT.

package blog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mingchuan.me/app/drivers/swagger/models"
)

// ListPublicPostsOKCode is the HTTP code returned for type ListPublicPostsOK
const ListPublicPostsOKCode int = 200

/*ListPublicPostsOK success

swagger:response listPublicPostsOK
*/
type ListPublicPostsOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostsList `json:"body,omitempty"`
}

// NewListPublicPostsOK creates ListPublicPostsOK with default headers values
func NewListPublicPostsOK() *ListPublicPostsOK {

	return &ListPublicPostsOK{}
}

// WithPayload adds the payload to the list public posts o k response
func (o *ListPublicPostsOK) WithPayload(payload *models.PostsList) *ListPublicPostsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list public posts o k response
func (o *ListPublicPostsOK) SetPayload(payload *models.PostsList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPublicPostsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPublicPostsBadRequestCode is the HTTP code returned for type ListPublicPostsBadRequest
const ListPublicPostsBadRequestCode int = 400

/*ListPublicPostsBadRequest service error

swagger:response listPublicPostsBadRequest
*/
type ListPublicPostsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceError `json:"body,omitempty"`
}

// NewListPublicPostsBadRequest creates ListPublicPostsBadRequest with default headers values
func NewListPublicPostsBadRequest() *ListPublicPostsBadRequest {

	return &ListPublicPostsBadRequest{}
}

// WithPayload adds the payload to the list public posts bad request response
func (o *ListPublicPostsBadRequest) WithPayload(payload *models.ServiceError) *ListPublicPostsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list public posts bad request response
func (o *ListPublicPostsBadRequest) SetPayload(payload *models.ServiceError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPublicPostsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPublicPostsInternalServerErrorCode is the HTTP code returned for type ListPublicPostsInternalServerError
const ListPublicPostsInternalServerErrorCode int = 500

/*ListPublicPostsInternalServerError service error (fatal)

swagger:response listPublicPostsInternalServerError
*/
type ListPublicPostsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceError `json:"body,omitempty"`
}

// NewListPublicPostsInternalServerError creates ListPublicPostsInternalServerError with default headers values
func NewListPublicPostsInternalServerError() *ListPublicPostsInternalServerError {

	return &ListPublicPostsInternalServerError{}
}

// WithPayload adds the payload to the list public posts internal server error response
func (o *ListPublicPostsInternalServerError) WithPayload(payload *models.ServiceError) *ListPublicPostsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list public posts internal server error response
func (o *ListPublicPostsInternalServerError) SetPayload(payload *models.ServiceError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPublicPostsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
