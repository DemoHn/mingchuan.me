// Code generated by go-swagger; DO NOT EDIT.

package blog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mingchuan.me/app/drivers/swagger/models"
)

// GetOnePublicPostOKCode is the HTTP code returned for type GetOnePublicPostOK
const GetOnePublicPostOKCode int = 200

/*GetOnePublicPostOK success

swagger:response getOnePublicPostOK
*/
type GetOnePublicPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.Post `json:"body,omitempty"`
}

// NewGetOnePublicPostOK creates GetOnePublicPostOK with default headers values
func NewGetOnePublicPostOK() *GetOnePublicPostOK {

	return &GetOnePublicPostOK{}
}

// WithPayload adds the payload to the get one public post o k response
func (o *GetOnePublicPostOK) WithPayload(payload *models.Post) *GetOnePublicPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one public post o k response
func (o *GetOnePublicPostOK) SetPayload(payload *models.Post) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOnePublicPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOnePublicPostBadRequestCode is the HTTP code returned for type GetOnePublicPostBadRequest
const GetOnePublicPostBadRequestCode int = 400

/*GetOnePublicPostBadRequest service error

swagger:response getOnePublicPostBadRequest
*/
type GetOnePublicPostBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceError `json:"body,omitempty"`
}

// NewGetOnePublicPostBadRequest creates GetOnePublicPostBadRequest with default headers values
func NewGetOnePublicPostBadRequest() *GetOnePublicPostBadRequest {

	return &GetOnePublicPostBadRequest{}
}

// WithPayload adds the payload to the get one public post bad request response
func (o *GetOnePublicPostBadRequest) WithPayload(payload *models.ServiceError) *GetOnePublicPostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one public post bad request response
func (o *GetOnePublicPostBadRequest) SetPayload(payload *models.ServiceError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOnePublicPostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOnePublicPostInternalServerErrorCode is the HTTP code returned for type GetOnePublicPostInternalServerError
const GetOnePublicPostInternalServerErrorCode int = 500

/*GetOnePublicPostInternalServerError service error (fatal)

swagger:response getOnePublicPostInternalServerError
*/
type GetOnePublicPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceError `json:"body,omitempty"`
}

// NewGetOnePublicPostInternalServerError creates GetOnePublicPostInternalServerError with default headers values
func NewGetOnePublicPostInternalServerError() *GetOnePublicPostInternalServerError {

	return &GetOnePublicPostInternalServerError{}
}

// WithPayload adds the payload to the get one public post internal server error response
func (o *GetOnePublicPostInternalServerError) WithPayload(payload *models.ServiceError) *GetOnePublicPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one public post internal server error response
func (o *GetOnePublicPostInternalServerError) SetPayload(payload *models.ServiceError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOnePublicPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
