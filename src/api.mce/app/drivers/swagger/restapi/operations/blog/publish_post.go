// Code generated by go-swagger; DO NOT EDIT.

package blog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PublishPostHandlerFunc turns a function with the right signature into a publish post handler
type PublishPostHandlerFunc func(PublishPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PublishPostHandlerFunc) Handle(params PublishPostParams) middleware.Responder {
	return fn(params)
}

// PublishPostHandler interface for that can handle valid publish post params
type PublishPostHandler interface {
	Handle(PublishPostParams) middleware.Responder
}

// NewPublishPost creates a new http.Handler for the publish post operation
func NewPublishPost(ctx *middleware.Context, handler PublishPostHandler) *PublishPost {
	return &PublishPost{Context: ctx, Handler: handler}
}

/*PublishPost swagger:route POST /admin/posts/{id}/publish blog publishPost

publish a post

*/
type PublishPost struct {
	Context *middleware.Context
	Handler PublishPostHandler
}

func (o *PublishPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPublishPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
