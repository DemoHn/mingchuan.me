// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Post post
// swagger:model Post
type Post struct {

	// content
	Content string `json:"content,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// permission
	// Enum: [PUBLIC PRIVATE]
	Permission string `json:"permission,omitempty"`

	// status
	// Enum: [PUBLISHED DRAFTED REMOVED]
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// Validate validates this post
func (m *Post) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTypePermissionPropEnum = append(postTypePermissionPropEnum, v)
	}
}

const (

	// PostPermissionPUBLIC captures enum value "PUBLIC"
	PostPermissionPUBLIC string = "PUBLIC"

	// PostPermissionPRIVATE captures enum value "PRIVATE"
	PostPermissionPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *Post) validatePermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postTypePermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Post) validatePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.Permission) { // not required
		return nil
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

var postTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLISHED","DRAFTED","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTypeStatusPropEnum = append(postTypeStatusPropEnum, v)
	}
}

const (

	// PostStatusPUBLISHED captures enum value "PUBLISHED"
	PostStatusPUBLISHED string = "PUBLISHED"

	// PostStatusDRAFTED captures enum value "DRAFTED"
	PostStatusDRAFTED string = "DRAFTED"

	// PostStatusREMOVED captures enum value "REMOVED"
	PostStatusREMOVED string = "REMOVED"
)

// prop value enum
func (m *Post) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Post) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Post) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Post) UnmarshalBinary(b []byte) error {
	var res Post
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
